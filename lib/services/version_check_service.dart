import 'dart:io';
import 'package:firebase_remote_config/firebase_remote_config.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';
import '../services/logger_service.dart';
import '../services/storage_service.dart';

class VersionCheckService {
  static final VersionCheckService _instance = VersionCheckService._internal();
  final LoggerService _logger = LoggerService();
  final StorageService _storageService = StorageService();
  late FirebaseRemoteConfig _remoteConfig;
  
  factory VersionCheckService() => _instance;
  VersionCheckService._internal();

  /// Remote Config'i ba≈ülat
  Future<void> initialize() async {
    try {
      _remoteConfig = FirebaseRemoteConfig.instance;
      
      // Remote Config ayarlarƒ±
      await _remoteConfig.setConfigSettings(RemoteConfigSettings(
        fetchTimeout: const Duration(seconds: 10),
        minimumFetchInterval: const Duration(hours: 1),
      ));

      // Varsayƒ±lan deƒüerler
      await _remoteConfig.setDefaults({
        'min_ios_version': '1.0.1',
        'min_android_version': '1.0.1',
        'current_ios_version': '1.0.1',
        'current_android_version': '1.0.1',
        'force_update_ios': false,
        'force_update_android': false,
        'update_message_ios': 'Yeni bir s√ºr√ºm mevcut! G√ºncellemek i√ßin App Store\'a gidin.',
        'update_message_android': 'Yeni bir s√ºr√ºm mevcut! G√ºncellemek i√ßin Play Store\'a gidin.',
        'force_update_message': 'Bu s√ºr√ºm artƒ±k desteklenmiyor. Uygulamayƒ± g√ºncellemeden devam edemezsiniz.',
        'ios_store_url': 'https://apps.apple.com/app/todobus/id6738289053',
        'android_store_url': 'https://play.google.com/store/apps/details?id=com.rivorya.todobus',
      });

      // Remote Config verilerini getir
      await _remoteConfig.fetchAndActivate();
      
      _logger.i('‚úÖ Version Check Service ba≈ülatƒ±ldƒ±');
    } catch (e) {
      _logger.e('‚ùå Version Check Service ba≈ülatƒ±lamadƒ±: $e');
    }
  }

  /// Remote Config cache'ini temizle ve varsayƒ±lan deƒüerleri yeniden y√ºkle
  Future<void> resetToDefaults() async {
    try {
      _logger.i('üîÑ Remote Config sƒ±fƒ±rlanƒ±yor...');
      
      // Cache'i temizle
      await _remoteConfig.setConfigSettings(RemoteConfigSettings(
        fetchTimeout: const Duration(minutes: 1),
        minimumFetchInterval: Duration.zero, // Hemen fetch etmek i√ßin
      ));
      
      // Varsayƒ±lan deƒüerleri tekrar ayarla
      await _remoteConfig.setDefaults({
        'min_ios_version': '1.0.1',
        'min_android_version': '1.0.1',
        'current_ios_version': '1.0.1',
        'current_android_version': '1.0.1',
        'force_update_ios': false,
        'force_update_android': false,
        'update_message_ios': 'Yeni bir s√ºr√ºm mevcut! G√ºncellemek i√ßin App Store\'a gidin.',
        'update_message_android': 'Yeni bir s√ºr√ºm mevcut! G√ºncellemek i√ßin Play Store\'a gidin.',
        'force_update_message': 'Bu s√ºr√ºm artƒ±k desteklenmiyor. Uygulamayƒ± g√ºncellemeden devam edemezsiniz.',
        'ios_store_url': 'https://apps.apple.com/app/todobus/id6738289053',
        'android_store_url': 'https://play.google.com/store/apps/details?id=com.rivorya.todobus',
      });
      
      // Yeni verilerle fetch et
      await _remoteConfig.fetchAndActivate();
      
      _logger.i('‚úÖ Remote Config ba≈üarƒ±yla sƒ±fƒ±rlandƒ±');
      
    } catch (e) {
      _logger.e('‚ùå Remote Config sƒ±fƒ±rlanƒ±rken hata: $e');
    }
  }

  /// S√ºr√ºm kontrol√º yap ve gerekirse g√ºncelleme bildirimi g√∂ster
  Future<void> checkForUpdates(BuildContext context) async {
    try {
      // G√ºncel uygulama bilgilerini al
      final packageInfo = await PackageInfo.fromPlatform();
      final currentVersion = packageInfo.version;
      final platform = Platform.isIOS ? 'ios' : 'android';
      
      _logger.i('üîç S√ºr√ºm kontrol√º: $platform v$currentVersion');
      
      // Remote Config'den minimum ve g√ºncel s√ºr√ºmleri al
      final minVersion = _remoteConfig.getString('min_${platform}_version');
      final currentRemoteVersion = _remoteConfig.getString('current_${platform}_version');
      final forceUpdate = _remoteConfig.getBool('force_update_$platform');
      
      _logger.i('üìä Minimum s√ºr√ºm: $minVersion');
      _logger.i('üìä G√ºncel uzak s√ºr√ºm: $currentRemoteVersion');
      _logger.i('üìä Zorla g√ºncelleme: $forceUpdate');
      
      // T√ºm Remote Config deƒüerlerini debug i√ßin g√∂ster
      _logger.i('üîß Debug - T√ºm Remote Config deƒüerleri:');
      _logger.i('  min_ios_version: ${_remoteConfig.getString('min_ios_version')}');
      _logger.i('  min_android_version: ${_remoteConfig.getString('min_android_version')}');
      _logger.i('  current_ios_version: ${_remoteConfig.getString('current_ios_version')}');
      _logger.i('  current_android_version: ${_remoteConfig.getString('current_android_version')}');
      _logger.i('  force_update_ios: ${_remoteConfig.getBool('force_update_ios')}');
      _logger.i('  force_update_android: ${_remoteConfig.getBool('force_update_android')}');
      
      // S√ºr√ºm kar≈üƒ±la≈ütƒ±rmasƒ±
      final needsUpdate = _isVersionLower(currentVersion, currentRemoteVersion);
      final isBelowMinimum = _isVersionLower(currentVersion, minVersion);
      
      _logger.i('üîç S√ºr√ºm kar≈üƒ±la≈ütƒ±rmasƒ±:');
      _logger.i('  Mevcut s√ºr√ºm: $currentVersion');
      _logger.i('  Minimum s√ºr√ºm: $minVersion');
      _logger.i('  Uzak s√ºr√ºm: $currentRemoteVersion');
      _logger.i('  G√ºncelleme gerekiyor: $needsUpdate');
      _logger.i('  Minimum altƒ±nda: $isBelowMinimum');
      _logger.i('  Zorla g√ºncelleme aktif: $forceUpdate');
      
      // UYARI: Eƒüer force update aktifse nedenini belirt
      if (forceUpdate) {
        _logger.w('‚ö†Ô∏è ZORLA G√úNCELLEME AKTƒ∞F! Firebase Remote Config\'de force_update_$platform = true olarak ayarlanmƒ±≈ü!');
      }
      
      // UYARI: Eƒüer minimum s√ºr√ºm√ºn altƒ±ndaysa detay ver
      if (isBelowMinimum) {
        _logger.w('‚ö†Ô∏è MEVCUT S√úR√úM Mƒ∞Nƒ∞MUMUN ALTINDA!');
        _logger.w('  Mevcut: $currentVersion');
        _logger.w('  Minimum: $minVersion');
        final currentParts = currentVersion.split('.').map(int.parse).toList();
        final minParts = minVersion.split('.').map(int.parse).toList();
        for (int i = 0; i < 3; i++) {
          final current = i < currentParts.length ? currentParts[i] : 0;
          final minimum = i < minParts.length ? minParts[i] : 0;
          _logger.w('  Kƒ±sƒ±m $i: $current vs $minimum');
        }
      }
      
      if (isBelowMinimum || forceUpdate) {
        // Zorla g√ºncelleme
        _logger.w('‚ö†Ô∏è ZORLA G√úNCELLEME GEREKƒ∞YOR!');
        _logger.w('  Sebep - Minimum altƒ±nda: $isBelowMinimum');
        _logger.w('  Sebep - Zorla g√ºncelleme: $forceUpdate');
        if (context.mounted) {
          await _showForceUpdateDialog(context, platform);
        }
      } else if (needsUpdate) {
        // Opsiyonel g√ºncelleme
        _logger.i('üì± Opsiyonel g√ºncelleme mevcut');
        if (context.mounted) {
          await _showOptionalUpdateDialog(context, platform);
        }
      } else {
        _logger.i('‚úÖ Uygulama g√ºncel');
      }
      
    } catch (e) {
      _logger.e('‚ùå S√ºr√ºm kontrol√ºnde hata: $e');
    }
  }

  /// Manuel debug kontrol√º (geli≈ütirme ama√ßlƒ±)
  Future<void> debugVersionCheck() async {
    try {
      final packageInfo = await PackageInfo.fromPlatform();
      final currentVersion = packageInfo.version;
      final platform = Platform.isIOS ? 'ios' : 'android';
      
      print('=== VERSION DEBUG INFO ===');
      print('Platform: $platform');
      print('Current App Version: $currentVersion');
      print('');
      print('Remote Config Values:');
      print('  min_ios_version: ${_remoteConfig.getString('min_ios_version')}');
      print('  min_android_version: ${_remoteConfig.getString('min_android_version')}');
      print('  current_ios_version: ${_remoteConfig.getString('current_ios_version')}');
      print('  current_android_version: ${_remoteConfig.getString('current_android_version')}');
      print('  force_update_ios: ${_remoteConfig.getBool('force_update_ios')}');
      print('  force_update_android: ${_remoteConfig.getBool('force_update_android')}');
      print('');
      
      final minVersion = _remoteConfig.getString('min_${platform}_version');
      final forceUpdate = _remoteConfig.getBool('force_update_$platform');
      final isBelowMinimum = _isVersionLower(currentVersion, minVersion);
      
      print('For Current Platform ($platform):');
      print('  Minimum Version: $minVersion');
      print('  Force Update: $forceUpdate');
      print('  Is Below Minimum: $isBelowMinimum');
      print('');
      print('CONCLUSION:');
      if (isBelowMinimum) {
        print('‚ùå PROBLEM: Your app version ($currentVersion) is below minimum ($minVersion)');
      }
      if (forceUpdate) {
        print('‚ùå PROBLEM: Force update is enabled in Firebase Remote Config');
      }
      if (!isBelowMinimum && !forceUpdate) {
        print('‚úÖ No issues found - app should not show force update');
      }
      print('========================');
      
    } catch (e) {
      print('Error in debug check: $e');
    }
  }

  /// Zorla g√ºncelleme dialogu
  Future<void> _showForceUpdateDialog(BuildContext context, String platform) async {
    final message = _remoteConfig.getString('force_update_message');
    
    if (context.mounted) {
      await showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => AlertDialog(
          title: const Row(
            children: [
              Icon(Icons.system_update, color: Colors.red),
              SizedBox(width: 8),
              Text('Zorunlu G√ºncelleme'),
            ],
          ),
          content: Text(message),
          actions: [
            ElevatedButton.icon(
              onPressed: () => _openStore(platform),
              icon: const Icon(Icons.open_in_new),
              label: const Text('G√ºncelle'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      );
    }
  }

  /// Opsiyonel g√ºncelleme dialogu
  Future<void> _showOptionalUpdateDialog(BuildContext context, String platform) async {
    // Kullanƒ±cƒ± daha √∂nce bu s√ºr√ºm i√ßin "Sonra hatƒ±rlat" demi≈ü mi kontrol et
    final skipVersion = _storageService.getData('skip_update_version');
    final remoteVersion = _remoteConfig.getString('current_${platform}_version');
    
    if (skipVersion == remoteVersion) {
      _logger.i('üì± Kullanƒ±cƒ± bu s√ºr√ºm i√ßin g√ºncelleme bildirimi atlamƒ±≈ü');
      return;
    }
    
    final message = _remoteConfig.getString('update_message_$platform');
    
    if (context.mounted) {
      await showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: const Row(
            children: [
              Icon(Icons.update, color: Colors.blue),
              SizedBox(width: 8),
              Text('G√ºncelleme Mevcut'),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(message),
              const SizedBox(height: 16),
              Text(
                'Yeni s√ºr√ºm: $remoteVersion',
                style: const TextStyle(fontWeight: FontWeight.bold),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                // Bu s√ºr√ºm i√ßin bir s√ºre hatƒ±rlatma
                _storageService.saveData('skip_update_version', remoteVersion);
              },
              child: const Text('Sonra Hatƒ±rlat'),
            ),
            ElevatedButton.icon(
              onPressed: () {
                Navigator.of(context).pop();
                _openStore(platform);
              },
              icon: const Icon(Icons.open_in_new),
              label: const Text('G√ºncelle'),
            ),
          ],
        ),
      );
    }
  }

  /// Store'u a√ß
  Future<void> _openStore(String platform) async {
    try {
      final storeUrl = _remoteConfig.getString('${platform}_store_url');
      final uri = Uri.parse(storeUrl);
      
      if (await canLaunchUrl(uri)) {
        await launchUrl(uri, mode: LaunchMode.externalApplication);
        _logger.i('üì± Store a√ßƒ±ldƒ±: $storeUrl');
      } else {
        _logger.e('‚ùå Store URL a√ßƒ±lamadƒ±: $storeUrl');
      }
    } catch (e) {
      _logger.e('‚ùå Store a√ßƒ±lƒ±rken hata: $e');
    }
  }

  /// S√ºr√ºm kar≈üƒ±la≈ütƒ±rmasƒ± (semantic versioning)
  bool _isVersionLower(String current, String remote) {
    final currentParts = current.split('.').map(int.parse).toList();
    final remoteParts = remote.split('.').map(int.parse).toList();
    
    // Eksik kƒ±sƒ±mlarƒ± 0 ile doldur
    while (currentParts.length < 3) {
      currentParts.add(0);
    }
    while (remoteParts.length < 3) {
      remoteParts.add(0);
    }
    
    for (int i = 0; i < 3; i++) {
      if (currentParts[i] < remoteParts[i]) return true;
      if (currentParts[i] > remoteParts[i]) return false;
    }
    
    return false; // E≈üitse g√ºncelleme gerekmez
  }

  /// Otomatik s√ºr√ºm kontrol√º (arka planda)
  Future<void> checkForUpdatesInBackground() async {
    try {
      await _remoteConfig.fetchAndActivate();
      _logger.i('üîÑ Arka plan s√ºr√ºm kontrol√º tamamlandƒ±');
    } catch (e) {
      _logger.e('‚ùå Arka plan s√ºr√ºm kontrol√ºnde hata: $e');
    }
  }

  /// Manuel s√ºr√ºm bilgilerini g√ºncelle (Admin paneli i√ßin)
  Future<void> updateRemoteVersions({
    required String iosVersion,
    required String androidVersion,
    bool forceIosUpdate = false,
    bool forceAndroidUpdate = false,
  }) async {
    // Bu Firebase Console'dan yapƒ±lƒ±r, burada sadece log
    _logger.i('üìù Manuel s√ºr√ºm g√ºncelleme:');
    _logger.i('  iOS: $iosVersion (Force: $forceIosUpdate)');
    _logger.i('  Android: $androidVersion (Force: $forceAndroidUpdate)');
  }
} 